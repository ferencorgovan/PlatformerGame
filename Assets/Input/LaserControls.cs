//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/LaserControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LaserControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LaserControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LaserControls"",
    ""maps"": [
        {
            ""name"": ""Laser"",
            ""id"": ""f2b7ed8f-9e1f-4dc4-93cf-47bda9024f0b"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""bad951c6-3ed4-4194-84a6-d2556638d4ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""51b20bb6-f353-41ef-978e-06cc89c36817"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""302707a4-7cdf-4b68-9b2e-411849c7f90c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c95c316-7618-4de2-a769-7abfbc6a8c9e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Laser
        m_Laser = asset.FindActionMap("Laser", throwIfNotFound: true);
        m_Laser_MoveUp = m_Laser.FindAction("MoveUp", throwIfNotFound: true);
        m_Laser_MoveDown = m_Laser.FindAction("MoveDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Laser
    private readonly InputActionMap m_Laser;
    private List<ILaserActions> m_LaserActionsCallbackInterfaces = new List<ILaserActions>();
    private readonly InputAction m_Laser_MoveUp;
    private readonly InputAction m_Laser_MoveDown;
    public struct LaserActions
    {
        private @LaserControls m_Wrapper;
        public LaserActions(@LaserControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_Laser_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Laser_MoveDown;
        public InputActionMap Get() { return m_Wrapper.m_Laser; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LaserActions set) { return set.Get(); }
        public void AddCallbacks(ILaserActions instance)
        {
            if (instance == null || m_Wrapper.m_LaserActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LaserActionsCallbackInterfaces.Add(instance);
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
        }

        private void UnregisterCallbacks(ILaserActions instance)
        {
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
        }

        public void RemoveCallbacks(ILaserActions instance)
        {
            if (m_Wrapper.m_LaserActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILaserActions instance)
        {
            foreach (var item in m_Wrapper.m_LaserActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LaserActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LaserActions @Laser => new LaserActions(this);
    public interface ILaserActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
}
